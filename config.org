* Minor stuff
** show lines and columns on the modeline
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
                              (?\' . ?\')
			      ))
  (electric-pair-mode t)
#+end_src
** conf mode better indents
#+begin_src emacs-lisp
  (add-hook 'conf-mode-hook
	    (lambda ()
	      (setq indent-line-function #'insert-tab
		    indent-tabs-mode     t)))
  (setq indent-tabs-mode t)
#+end_src
** subword
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
* Terminal
** Vterm
#+begin_src emacs-lisp
  (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
  (use-package vterm
    :ensure t)
#+end_src
** multi-vterm
#+begin_src emacs-lisp
  (use-package multi-vterm
    :ensure t)
#+end_src
* Org Mode
** basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
	       '("sh" . "src shell"))
#+end_src
** org mode sub and super scripts
#+begin_src emacs-lisp
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts t)
#+end_src
** Org mode bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode ))
#+end_src
** org mode table blank field''
#+begin_src emacs-lisp
  (setq org-table-auto-blank-field nil)
#+end_src
** line wrap
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'toggle-word-wrap)
#+end_src
** increase size of org mode latex preview
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src
* Which-key
** setting up which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c m r" . sudo-edit))
#+end_src
* dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))
#+end_src
* Beacon
** setup
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src
* Variables
** back up and auto save directory
#+begin_src emacs-lisp
  (setq backup-directory-alist
	`((".*" . "~/.emacs_saves")))
  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs_saves" t)))
#+end_src
** anoyances
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
#+end_src
** remove tool bar, menu bar and scroll bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** aliases
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** global highlight
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src
** conservative scroll
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
** reload when file changes
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
* Rebound keys
** multi-vterm
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m m") 'multi-vterm)
#+end_src
** truncate-lines
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m p") 'toggle-truncate-lines)
#+end_src
* IDO
** enable ido mode
#+begin_src emacs-lisp

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (setq ido-create-new-buffer 'always)
#+end_src
** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** switch buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffers
** enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** kill current buffer by default
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (curent-buffer)))
  (global-set-key (kbd "C-x k") `kill-current-buffer)
#+end_src
* avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* convienent functions
** copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c y y") `copy-whole-line)
#+end_src
** kill-whole-word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c d d") 'kill-whole-word)
#+end_src
** setup-tide-mode
#+begin_src emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))
#+end_src
* config edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* switch window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwert-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind ([remap other-window] . switch-window))
#+end_src
* window splitting function
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* nginx mode
#+begin_src emacs-lisp
  (use-package nginx-mode
    :ensure t
    :init)
#+end_src
* Borderless window on startup
#+begin_src emacs-lisp
  (set-frame-parameter nil 'undecorated t)
#+end_src
* Correct emacs size on startup
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
  (setq default-frame-alist
	'((top . 0) (left . 0)
	  (width . 80) (height . 40)))
  (setq initial-frame-alist '((top . 0) (left . 0) (width . 80) (height . 200)))
#+end_src

* Sass
** ssaass
#+begin_src emacs-lisp
  (use-package ssass-mode
    :ensure t)
#+end_src
* autocompletion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* modeline
** spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** diminish
#+begin_src emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'company-mode)
      (diminish 'rainbow-mode)
      (diminish 'beacon-mode)
      (diminish 'which-key-mode)
      (diminish 'org-src-mode)
      (diminish 'eldoc-mode)
      (diminish 'subword-mode)
      (diminish 'flycheck-mode))
#+end_src
#+end_src
* popup killring
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
* swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+end_src
* expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+end_src
* Rust mode
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init 
    (global-flycheck-mode)
    (setq company-tooltip-align-annotations t))
  (setq flycheck-global-modes '(not rust-mode))
#+end_src
* Typescript mode
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t)
#+end_src
* Tide
#+begin_src emacs-lisp
  (use-package tide
    :ensure t
    :after (company flycheck)
    :hook ((typescript-ts-mode . tide-setup)
	   (tsx-ts-mode . tide-setup)
	   (typescript-ts-mode . tide-hl-identifier-mode)
	   (before-save . tide-format-before-save)))
#+end_src
